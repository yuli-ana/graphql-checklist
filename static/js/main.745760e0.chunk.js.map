{"version":3,"sources":["App.js","index.js"],"names":["GET_TODO","gql","TOGGLE_TODO","ADD_TODO","DELETE_TODO","App","useState","todoText","setTodoText","useQuery","data","loading","error","useMutation","toggleTodo","onCompleted","addTodo","deleteTodo","e","a","preventDefault","trim","variables","text","refetchQueries","query","console","log","id","done","window","confirm","update","cache","newTodos","readQuery","todos","filter","todo","writeQuery","className","role","aria-label","action","onSubmit","type","placeholder","onChange","target","value","map","onDoubleClick","handleToggleTodo","key","style","listStyle","onClick","handleDeleteTodo","client","ApolloClient","uri","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"4qCAOA,IAAMA,EAAWC,cAAH,KAURC,EAAcD,cAAH,KAYXE,EAAWF,cAAH,KAYRG,EAAcH,cAAH,KAyGFI,MArFf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEoBC,mBAAST,GAAlCU,EAFK,EAELA,KAAMC,EAFD,EAECA,QAASC,EAFV,EAEUA,MAFV,EAGQC,sBAAYX,GAA1BY,EAHM,sBAKKD,sBAAYV,EAAU,CACtCY,YAAa,kBAAMP,EAAY,OAD1BQ,EALM,sBASQH,sBAAYT,GAA1Ba,EATM,oBAeb,GAAIN,EAAS,OAAO,2CACpB,GAAIC,EAAO,OAAO,wDAhBL,4CAkBb,WAA6BM,GAA7B,eAAAC,EAAA,yDACED,EAAEE,iBACGb,EAASc,OAFhB,iEAIqBL,EAAQ,CACzBM,UAAW,CAAEC,KAAMhB,GAEnBiB,eAAgB,CAAC,CAAEC,MAAOzB,MAP9B,OAIQU,EAJR,OASEgB,QAAQC,IAAI,aAAcjB,GAT5B,4CAlBa,kEAoCb,iCAAAS,EAAA,6DAAkCS,EAAlC,EAAkCA,GAAIC,EAAtC,EAAsCA,KAAtC,SACqBf,EAAW,CAAEQ,UAAW,CAAEM,KAAIC,MAAOA,KAD1D,OACQnB,EADR,OAEEgB,QAAQC,IAAI,eAAgBjB,GAF9B,4CApCa,kEAyCb,+BAAAS,EAAA,yDAAkCS,EAAlC,EAAkCA,IACZE,OAAOC,QAAQ,oCADrC,gCAGuBd,EAAW,CAC5BK,UAAW,CAAEM,MACbI,OAAQ,SAAAC,GAEN,IAEMC,EAFWD,EAAME,UAAU,CAAEV,MAAOzB,IAEhBoC,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKV,KAAOA,KAE3DK,EAAMM,WAAW,CAAEd,MAAOzB,EAAUU,KAAM,CAAE0B,MAAOF,QAX3D,OAGUxB,EAHV,OAcIgB,QAAQC,IAAI,eAAgBjB,GAdhC,4CAzCa,sBA2Db,OACE,yBAAK8B,UAAU,gEACb,wBAAIA,UAAU,QAAd,qBAAuC,0BAAMC,KAAK,MAAMC,aAAW,aAA5B,WAEvC,0BAAMC,OAAO,GAAGH,UAAU,MAAMI,SA/DvB,6CAgEP,2BAAOJ,UAAU,mBAAmBK,KAAK,OAAOC,YAAY,kBAAkBC,SAhCpF,SAA2B7B,GACzBV,EAAYU,EAAE8B,OAAOC,QA+B0FA,MAAO1C,IAClH,4BAAQiC,UAAU,kBAAkBK,KAAK,UAAzC,WAGF,yBAAKL,UAAU,gDACZ9B,EAAK0B,MAAMc,KAAI,SAAAZ,GAAI,OAClB,uBAAGa,cAAe,kBAtEb,2CAsEmBC,CAAiBd,IAAOe,IAAKf,EAAKV,IACxD,0BAAMY,UAAS,+BAA0BF,EAAKT,MAAQ,UAAYyB,MAAO,CAAEC,UAAW,SAAWjB,EAAKf,MACtG,4BAAQiC,QAAS,kBAxEd,2CAwEoBC,CAAiBnB,IAAOE,UAAU,wBACvD,0BAAMA,UAAU,OAAhB,gBC9HRkB,EAAS,IAAIC,eAAa,CAC9BC,IAAK,kDACL3B,MAAO,IAAI4B,kBAiBbC,IAASC,OACP,kBAAC,iBAAD,CAAgBL,OAAQA,GACtB,kBAAC,EAAD,OAEFM,SAASC,eAAe,W","file":"static/js/main.745760e0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useQuery, gql, useMutation } from '@apollo/client';\nimport { set } from 'object-path';\n\n\n// Most commonly we write a query within variable\n// Name variable in uppercase so I know this variable is never going to be updated again\nconst GET_TODO = gql`\nquery getQuery {\n      todos {\n        done\n        id\n        text\n      }\n    }\n    `;\n\nconst TOGGLE_TODO = gql`\n    mutation ToggleTodo($id:uuid, $done: Boolean!) {\n      update_todos(where: {id: {_eq: $id }}, _set: {done: $done}) {\n        returning {\n          done\n          id\n          text\n        }\n      }\n    }\n    `;\n\nconst ADD_TODO = gql`\n    mutation addTodo($text: String!) {\n      insert_todos(objects: {text: $text}) {\n        returning {\n          done\n          id\n          text\n        }\n      }\n    }\n    `;\n\nconst DELETE_TODO = gql`\nmutation deleteTodo($id: uuid!) {\n  delete_todos(where: {id: {_eq: $id}}) {\n    returning {\n      done\n      id\n      text\n    }\n  }\n}\n    \n    `;\n\n// add todos\n// toggle todos\n// delete todos\n// list todos\n\n\n\nfunction App() {\n  const [todoText, setTodoText] = useState('');\n  const { data, loading, error } = useQuery(GET_TODO);\n  const [toggleTodo] = useMutation(TOGGLE_TODO);\n  // useMutation takes 2 argument callback \n  const [addTodo] = useMutation(ADD_TODO, {\n    onCompleted: () => setTodoText(''),\n  });\n  // When using useMutation hook we can run some code after mutation is completed\n  const [deleteTodo] = useMutation(DELETE_TODO);\n\n\n\n  // Before executing mutation run it in hasura console first\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error fetching todos...</div>;\n\n  async function handleAddTodo(e) {\n    e.preventDefault();\n    if (!todoText.trim()) return;\n    // Apollo caches info. Add 2nd property refetchQueries to see UI updates immediately\n    const data = await addTodo({\n      variables: { text: todoText },\n      // Immediately refetch the query after performing mutation so a new created todo immediately show to the user\n      refetchQueries: [{ query: GET_TODO }]\n    })\n    console.log(\"added todo\", data);\n    // Instead of running setTodoText here we can run it in onCompleted callback\n    // setTodoText('');\n  }\n\n  function handleInputChange(e) {\n    setTodoText(e.target.value);\n  }\n\n  async function handleToggleTodo({ id, done }) {\n    const data = await toggleTodo({ variables: { id, done: !done, } });\n    console.log(\"toggled todo\", data)\n  }\n\n  async function handleDeleteTodo({ id }) {\n    const isConfirmed = window.confirm('Do you want to delete this todo?');\n    if (isConfirmed) {\n      const data = await deleteTodo({\n        variables: { id },\n        update: cache => {\n          // Read from the cache for a given query\n          const prevData = cache.readQuery({ query: GET_TODO })\n          // Manually update the cache\n          const newTodos = prevData.todos.filter(todo => todo.id !== id);\n          // Write back to that query\n          cache.writeQuery({ query: GET_TODO, data: { todos: newTodos } })\n        }\n      });\n      console.log(\"deleted todo\", data);\n    }\n  }\n\n  return (\n    <div className=\"vh-100 code flex flex-column items-center bg-purple pa4 fl-1\">\n      <h1 className=\"f2-l\">GraphQL checklist <span role=\"img\" aria-label=\"Checkmark\">âœ…</span></h1>\n      {/* Todo form */}\n      <form action=\"\" className=\"mb3\" onSubmit={handleAddTodo}>\n        <input className=\"pa2 f4 b--dashed\" type=\"text\" placeholder='Write your todo' onChange={handleInputChange} value={todoText} />\n        <button className=\"pa2 f4 bg-green\" type=\"submit\">Create</button>\n      </form>\n      {/* Todo list  */}\n      <div className=\"flex items-center justify-center flex-column\">\n        {data.todos.map(todo => (\n          <p onDoubleClick={() => handleToggleTodo(todo)} key={todo.id} >\n            <span className={`pointer list pa1 f3\" ${todo.done && \"strike\"}`} style={{ listStyle: 'none' }}>{todo.text}</span>\n            <button onClick={() => handleDeleteTodo(todo)} className=\"bg-transparent bn f4\">\n              <span className=\"red\">\n                &times;\n              </span>\n            </button>\n          </p>\n        ))\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// import { ApolloClient, gql, InMemoryCache } from '@apollo/client';\n// ApolloClient is the default import not in {} braces\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://intent-raccoon-42.hasura.app/v1/graphql',\n  cache: new InMemoryCache(),\n});\n\n// client.query({\n//   query: gql`\n//   query getQuery {\n//     todos {\n//       done\n//       id\n//       text\n//     }\n//   }\n//   `\n// }).then(data => console.log(data));\n\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}